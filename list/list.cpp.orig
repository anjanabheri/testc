
#include "../include.h"

typedef struct _node
{
    struct _node* next;
    int           data;
} node;

node* createNode(int data);
void insert(node** head, int data);
void sortInsert(node** head, int data);
void display(node* head);

int main()
{
    node* list1 = NULL;

    insert(&list1, 10);
    insert(&list1, 12);
    insert(&list1, 11);
    insert(&list1, 18);
    insert(&list1, 19);
    insert(&list1, 20);
    insert(&list1, 30);
    insert(&list1, 25);

    display(list1);

    return 0;
}

node* createNode(int data)
{
    node* temp = (node*)malloc(sizeof(node));
    temp->next = NULL;
    temp->data = data;
    return temp;
}

void insert(node** head, int data)
{
    node* newNode = NULL;
    node* temp = NULL;

    newNode = createNode(data);

    if (*head == NULL)
    {
        //first node
        *head = newNode;
        return;
    }
    temp = *head;

    while (temp->next != NULL)
    {
        temp = temp->next;
    }

    temp->next = newNode;

    return;
}

void sortInsert(node** head, int data);
{
    node* newNode = NULL;
    node* temp = NULL;

    newNode = createNode(data);

    if (*head == NULL)
    {
        //first node
        *head = newNode;
        return;
    }
    temp = *head;

    if (temp->next == NULL)
    {
        if (temp->data < data)
        {
            temp->next = newNode;
        }
        else
        {
            *head = newNode;
            newNode->next = temp;
        }
        return;
    }
    node* prev = NULL;

    prev = *head;
    temp = *head;

    while (temp->next != NULL)
    {
        if (temp->data > data)
        {
            newNode->next = temp;
            prev->next = newNode;
            if (temp == *head)
            {
*head = newNode;
}

            break;
        }
        temp = temp->next;
    }

    return;
}

void display(node* head)
{
    node* temp = head;

    cout << endl;

    while (temp != NULL)
    {
        cout << " " << temp->data << " --> ";
        temp = temp->next;
    }
    cout << " NULL" << endl << endl;

    return;
}
